service: autobot-oapi

provider:
  name: aws
  runtime: python3.6
  stage: ${opt:stage, 'staging'}
  role: AutobotAILambdaRole
  liveTablePrefix: ''
  stagingTablePrefix: 'staging_'
  tablePrefix: ${self:provider.${self:provider.stage}TablePrefix}

plugins:
  #- serverless-domain-manager
  - serverless-python-requirements
  - serverless-wsgi

custom:
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  domain:
      # staging: test.autobot.live
      staging: ${env:CUSTOM_DOMAIN}
      live: live backend api domain name
  # customDomain:
  #   domainName: ${self:custom.domain.${self:provider.stage}}
  #   basePath: ''
  #   stage: ${self:provider.stage}
  #   createRoute53Record: true
  #   certificateName: '*.autobot.live'



functions:
  oapi:
    handler: wsgi.handler
    environment:
       FLASK_ENV: ${self:provider.stage}
    timeout: 900
    role: ${self:provider.role}
    events:
      - http:
          path: /
          method: ANY
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: AutobotAIApiGatewayAuthorizer 
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: AutobotAIApiGatewayAuthorizer
      - http:
          path: /api/v1/public/
          method: ANY
          cors: true
      - http:
          path: /api/v1/public/{proxy+}
          method: ANY
          cors: true
  fetch_data:
    handler: data_fetcher.fetch
    memorySize: 1024
    timeout: 900
    role: ${self:provider.role}
    events:
      - sns: DataFetch-${self:provider.stage}
    environment:
      FLASK_ENV: ${self:provider.stage}
  schedule_data_fetch:
    handler: data_fetch_scheduler.schedule
    memorySize: 1024
    timeout: 180
    role: ${self:provider.role}
    events:
      - schedule: rate(5 minutes)
    environment:
      FLASK_ENV: ${self:provider.stage}
  alexa_skill_endpoint:
    handler: app.lambda_handler
    memorySize: 256
    timeout: 120
    role: ${self:provider.role}
    environment:
      FLASK_ENV: ${self:provider.stage}
  PostConfirmation:
    name: autobot-api-${self:provider.stage}-congintoUserCreateConfirm
    handler: autobot_resources/other-lambdas/create-user-on-confirmation.handler
    memorySize: 256
    runtime: nodejs12.x
    timeout: 180
    role: ${self:provider.role}
    environment:
      STAGE: ${self:provider.stage}

resources: # CloudFormation template syntax from here on.
  Resources: 
    AutobotAILambdaRole: 
      Type: "AWS::IAM::Role"
      Properties: 
        RoleName: ${self:provider.stage}_autobotAI_Role_Serverless
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Principal: 
                Service: 
                  - "lambda.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Path: "/"
        
    AutobotAILambdaRolePolicies: 
      Type: "AWS::IAM::Policy"
      Properties: 
        PolicyName: ${self:provider.stage}_autobotAI_Policy_serverless
        PolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Action: "*"
              Resource: "*"
        Roles: 
          - 
            Ref: AutobotAILambdaRole

    AutobotAICognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties: 
        UserPoolName: ${self:provider.stage}_autobotAI_Cognito_Userpool
        AdminCreateUserConfig: 
          AllowAdminCreateUserOnly: false
        AutoVerifiedAttributes:
          - email
        EmailConfiguration: 
          EmailSendingAccount: COGNITO_DEFAULT
        LambdaConfig:
          PostConfirmation: 
            "Fn::GetAtt": [ PostConfirmationLambdaFunction, Arn ]
        Policies: 
          PasswordPolicy:
            MinimumLength: "8"
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
            TemporaryPasswordValidityDays: "14"

        Schema: 
          -
            AttributeDataType: String
            Mutable: false
            Name: email
            Required: true
          -
            AttributeDataType: String
            Mutable: true
            Name: type
          -
            AttributeDataType: String
            Mutable: true
            Name: root_user
          -
            AttributeDataType: String
            Mutable: true
            Name: country
            
    # API Gateway Authorizer
    AutobotAIApiGatewayAuthorizer: 
      Type: AWS::ApiGateway::Authorizer
      Properties: 
        AuthorizerResultTtlInSeconds: 10
        IdentitySource: method.request.header.Authorization
        Name: AutobotAICognitoAuthorizer
        RestApiId: 
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs: 
          - {"Fn::Join": ["", ["arn:aws:cognito-idp:", {Ref: "AWS::Region"}, ":", {Ref: "AWS::AccountId"}, ":userpool/", Ref: AutobotAICognitoUserPool]]}

    # Creates a User Pool Client to be used by the identity pool
    AutobotAICognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:provider.stage}_autobotAI_Cognito_Userpool_app_client
        GenerateSecret: false
        UserPoolId: 
          Ref: AutobotAICognitoUserPool
    
    # Creates a federeated Identity pool
    AutobotAICognitoIdentityPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: ${self:provider.stage}_autobotAI_Cognito_Identity_pool
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders: 
          - ClientId: 
              Ref: AutobotAICognitoUserPoolClient
            ProviderName:
              "Fn::GetAtt": [ AutobotAICognitoUserPool, ProviderName ]

    DynamoDBTable1: 
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:provider.tablePrefix}account_setup
        AttributeDefinitions: 
          - 
            AttributeName: "externalId"
            AttributeType: "S"
        KeySchema: 
          - 
            AttributeName: "externalId"
            KeyType: "HASH"
        ProvisionedThroughput: 
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"

    DynamoDBTable2: 
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:provider.tablePrefix}aws_config
        AttributeDefinitions: 
          - 
            AttributeName: "type"
            AttributeType: "S"
        KeySchema: 
          - 
            AttributeName: "type"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST

    DynamoDBTable3: 
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:provider.tablePrefix}aws_datapoint_history
        AttributeDefinitions: 
          - 
            AttributeName: "intentId"
            AttributeType: "S"
          - 
            AttributeName: "itemId"
            AttributeType: "S"
        KeySchema: 
          - 
            AttributeName: "intentId"
            KeyType: "HASH"
          - 
            AttributeName: "itemId"
            KeyType: "RANGE"
        BillingMode: PAY_PER_REQUEST

    DynamoDBTable4: 
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:provider.tablePrefix}aws_fix_history
        AttributeDefinitions: 
          - 
            AttributeName: "accountId"
            AttributeType: "S"
          - 
            AttributeName: "timestamp"
            AttributeType: "S"
        KeySchema: 
          - 
            AttributeName: "accountId"
            KeyType: "HASH"
          - 
            AttributeName: "timestamp"
            KeyType: "RANGE"
        ProvisionedThroughput: 
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"

    DynamoDBTable5: 
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:provider.tablePrefix}aws_intent_history
        AttributeDefinitions: 
          - 
            AttributeName: "cid"
            AttributeType: "S"
          - 
            AttributeName: "timestamp"
            AttributeType: "S"
        KeySchema: 
          - 
            AttributeName: "cid"
            KeyType: "HASH"
          - 
            AttributeName: "timestamp"
            KeyType: "RANGE"
        ProvisionedThroughput: 
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"

    DynamoDBTable6: 
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:provider.tablePrefix}cloud_service_providers
        AttributeDefinitions: 
          - 
            AttributeName: "userId"
            AttributeType: "S"
          - 
            AttributeName: "accountId"
            AttributeType: "S"
        KeySchema: 
          - 
            AttributeName: "userId"
            KeyType: "HASH"
          - 
            AttributeName: "accountId"
            KeyType: "RANGE"
        ProvisionedThroughput: 
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"

    DynamoDBTable7: 
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:provider.tablePrefix}contact_info
        AttributeDefinitions: 
          - 
            AttributeName: "id"
            AttributeType: "S"
          - 
            AttributeName: "email"
            AttributeType: "S"
        KeySchema: 
          - 
            AttributeName: "id"
            KeyType: "HASH"
          - 
            AttributeName: "email"
            KeyType: "RANGE"
        ProvisionedThroughput: 
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"

    DynamoDBTable8: 
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:provider.tablePrefix}instance_schedule
        AttributeDefinitions: 
          - 
            AttributeName: "user_id"
            AttributeType: "S"
        KeySchema: 
          - 
            AttributeName: "user_id"
            KeyType: "HASH"
        ProvisionedThroughput: 
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"

    DynamoDBTable9: 
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:provider.tablePrefix}oauth
        AttributeDefinitions: 
          - 
            AttributeName: "authToken"
            AttributeType: "S"
        KeySchema: 
          - 
            AttributeName: "authToken"
            KeyType: "HASH"
        ProvisionedThroughput: 
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"

    DynamoDBTable10: 
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:provider.tablePrefix}users
        AttributeDefinitions: 
          - 
            AttributeName: "id"
            AttributeType: "S"
          - 
            AttributeName: "rootUserId"
            AttributeType: "S"
        KeySchema: 
          - 
            AttributeName: "id"
            KeyType: "HASH"
          - 
            AttributeName: "rootUserId"
            KeyType: "RANGE"
        ProvisionedThroughput: 
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
      

package:
  include:
    - autobot_helpers/**
    - autobot_resources/**
    - controllers/**
    - models/**
    - services/**
    - templates/**
    - creds/**
    - app.py
    - config.yml
    - flask_extended.py
    - requirements.txt
    - serverless.yml
    - templates.yml
  exclude:
    - .serverless/**
    - .vscode/**
    - .idea
    - .DS_Store
    - venv/**
    - templates/**
    - temp/**
    - static/**
    - node_modules/**
